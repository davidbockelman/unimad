// proto/kvstore.proto

syntax = "proto3";

package kvstore;

// Messages
message State {
    int32 term = 1;
    bool isLeader = 2; 
}

message KeyValue {
    string key = 1;
    string value = 2;
    int64 ClientId = 3;
    int64 RequestId = 4;
}

message GetKey {
    string key = 1;
    int64 ClientId = 2;
    int64 RequestId = 3;
}

message Reply {
    bool wrongLeader = 1;
    string error = 2;
    string value = 3;
}

message Empty {}

message IntegerArg {
    int32 arg = 1;
}

/* For Internal Use */

// The RequestVoteRPC message for requesting votes from other nodes
message RequestVoteRequest {
    int32 candidate_id = 1;        // ID of the candidate requesting the vote
    int32 term = 2;                 // Term number of the candidate
    int32 last_log_index = 3;       // Index of the last log entry of the candidate
    int32 last_log_term = 4;        // Term of the last log entry of the candidate
}

// The response message for RequestVoteRPC
message RequestVoteResponse {
    bool vote_granted = 1;          // Whether the vote is granted or not
    int32 term = 2;                 // Current term of the receiver
}

// KeyValueStore Service
service KeyValueStore {
    rpc GetState(Empty) returns (State) {};
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply) {};
    rpc Replace(KeyValue) returns (Reply) {};

    // Internal Use
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse);
}

// FrontEnd Service
service FrontEnd {
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply) {};
    rpc Replace(KeyValue) returns (Reply) {};
    rpc StartRaft(IntegerArg) returns (Reply) {};
}
